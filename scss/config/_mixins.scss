// ==========================================================================
// Anchos minimos (min-width) : @include mq-min(sm) {}
// ==========================================================================

@mixin mq-min($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
       $breakpoint-value: map-get($breakpoints, $breakpoint);
       @media (min-width: $breakpoint-value) {
          @content;
       }
    } @else {
       @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
 }
 
 // ==========================================================================
 // Anchos maximos (max-width) : @include mq-max(sm) {}
 // ==========================================================================
 
 @mixin mq-max($breakpoint) {
    @if map-has-key($breakpoints, $breakpoint) {
       $breakpoint-value: map-get($breakpoints, $breakpoint);
       @media (max-width: ($breakpoint-value - 1)) {
          @content;
       }
    } @else {
       @warn 'Invalid breakpoint: #{$breakpoint}.';
    }
 }
 
 // ==========================================================================
 // Anchos maximos / minimos (max-width and min-width) : @include mq-between(sm, md) {}
 // ==========================================================================
 
 @mixin mq-between($lower, $upper) {
    @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
       $lower-breakpoint: map-get($breakpoints, $lower);
       $upper-breakpoint: map-get($breakpoints, $upper);
          @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
          @content;
          }
       } @else {
          @if (map-has-key($breakpoints, $lower) == false) {
          @warn 'Your lower breakpoint was invalid: #{$lower}.';
       }
       @if (map-has-key($breakpoints, $upper) == false) {
          @warn 'Your upper breakpoint was invalid: #{$upper}.';
       }
    }
 }
 
 // ==========================================================================
 // Mixins para la generación de los botones : @include button( ... );
 // ==========================================================================
 
 @mixin button($bg, $color: color(grayscale, white)) {
    background: $bg;
    border-radius: 50px;
    border: 2px solid color( borders, color-1 );
    color: $color;
    font-family: $font-primary;
    font-size: map-get($sizes, base);
    font-weight: bold; 
    width: 28.7rem;
    &:hover {
      background: darken($bg, 7%);
      transition: all 0.2s ease;
      text-decoration: none;
    }
    &:focus {
       outline: 0;
       box-shadow: 0 0 0 0.6rem rgba(color( primary, base ), 0.25);
       text-decoration: none;
    }
    &:active {
      background: darken($bg, 10%);
    } 
    &:focus,
    &:hover{
       &:active{
         background: darken($bg, 10%);
         outline: 0;
       }
    }
    &.disabled, 
    &:disabled {
       opacity: .55;
       color: color( grayscale, gray-5 );
       background: color( grayscale, gray-3 );
       box-shadow: none;
       cursor: auto;
       &:hover {
          background: color( grayscale, gray-3 );
       }
       &:focus {
          box-shadow: none;
       }
    }
 }
 
 // ==========================================================================
 // Mixins para la generación de los spaciados ( margins y paddings )
 // ==========================================================================
 
 @mixin list-spacing($className, $styleName) {
    @each $name, $space in $sizes {
      #{$className}-#{$name} { 
        #{$styleName}: $space;
      }
    }
 }
 
 // ==========================================================================
 // Mixins para la generación de los colores de los textos y backgrounds
 // ==========================================================================
 
 @mixin color-modifiers($attribute: 'background', $property: 'color') {
    @each $name, $color in $colors {
       &-#{$name} {
          @each $tone, $hex in $color {
             &-#{$tone} {
             #{$property}: $hex;
             }
          }
       }
    }
 }
 
 // ==========================================================================
 // Mixins prefijos
 // ==========================================================================
//@include prefix(transition, all 0.2s ease-in-out, webkit moz o ms);

 @mixin prefix($property, $value, $prefixes: ()){
   @each $prefix in $prefixes {
     #{'-' + $prefix + '-' + $property}: $value;
   }
   // Output standard non-prefixed declaration
   #{$property}: $value;
 }

 // ==========================================================================
 // Mixins placeholder
 // ==========================================================================
 @mixin placeholder($selector,$color, $fontWeight, $size) {
   #{$selector}::-webkit-input-placeholder {color: $color; font-weight: $fontWeight; $size: font-size;}
   #{$selector}::-moz-placeholder          {color: $color; font-weight: $fontWeight; $size: font-size;}
   #{$selector}:-ms-input-placeholder      {color: $color; font-weight: $fontWeight; $size: font-size;}
 }

 @function hex-to-rgba($color: #fff, $opacity: 0.5) {
   @return rgba(red($color), green($color), blue($color), $opacity);
 }